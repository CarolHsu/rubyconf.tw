require 'yaml'
require 'erb'

require 'rubygems'
require 'redcarpet'

def markdown(src)
  extensions = [ :autolink, :hard_wrap ]
  Redcarpet.new(File.read(src), *extensions).to_html
end

@config = YAML::load_file('config.yml')

@speakers = YAML::load_file('speakers.yml')
@schedule = YAML::load_file('schedule.yml')
@sessions = YAML::load_file('sessions.yml')
@information = YAML::load_file('information.yml')

task :default => ["speakers:all", "schedule:all"] do
  welcome = @config['website']['welcome']
  sh "mv #{welcome}.html index.html"
end

task :clean => ["speakers:clean", "schedule:clean"] do
  sh "rm -f index.html"
end

def img_to_sepia(source, target)
  # code modified form http://www.imagemagick.org/RMagick/doc/colorize.rb.html
  require 'RMagick'

  img = Magick::Image.read(source).first

  # Convert the color image to monochrome
  mono = img.quantize(256, Magick::GRAYColorspace)

  # TODO: find a better color
  colorized = mono.colorize(0.0, 0.3, 0.3, '#520000')

  colorized.resize!(90, 90)
  colorized.write(target)
end

namespace :speakers do
  target = 'speakers.html'

  task :all do
    @speakers.each_pair do |nickname,speaker|
      
      speaker['intro'] = ""
      md = "speakers/#{nickname}.md"
      if File.exists? md
        speaker['intro'] = markdown(md)
      else
        speaker['intro'] = "<h2>#{speaker['name']}</h2><p>Introductions Coming Soon!</p>"
      end
    end

    @sessions['details'].each_pair do |key,session|

      photo_base = session['speakers'].join('-')
      photo = "images/speakers/#{photo_base}.png"
      photo_sepia = File.join(File.dirname(photo), "#{File.basename(photo, '.png')}.sepia.png")
      puts photo_sepia
      if File.exists? photo
        img_to_sepia(photo, photo_sepia)
        session['photo_base'] = photo_base
      else
        session['photo_base'] = nil
      end

      session['intro'] = markdown("sessions/#{key}.md")
    end
    
    @current_page = 'speakers'
    File.open(target, "w") do |f|
      @contents = ERB.new(File.read('speakers.html.erb')).result
      f.write ERB.new(File.read(@config['website']['layout'])).result
    end
  end
  
  task :clean do
    @sessions['details'].each_value do |session|
      sh "rm -f images/speakers/#{session['speakers'].join('-')}.sepia.png"
    end
    sh "rm -f #{target}"
  end
end

namespace :schedule do
  target = 'schedule.html'

  task :all do
    speaker_indices = {}
    @sessions['order'].each_with_index do |session,i|
      speaker_indices[ session ] = i + 1
    end

    @sessions['details'].each_pair do |session_name, session|
      session['speakers_slider_id'] = speaker_indices[ session_name ]
    end

    @current_page = 'schedule'

    File.open(target, "w") do |f|
      @contents = ERB.new(File.read('schedule.html.erb')).result
      f.write ERB.new(File.read(@config['website']['layout'])).result
    end
  end

  task :clean do
    sh "rm -f #{target}"
  end
end

namespace :information do
  target = 'information.html'

  task :all do
    @information['sections'].each do |section|
      section['description'] = markdown("information/#{section['key']}.md")
    end

    map_args = []
    @information['map']['args'].each_pair do |key,value|
      map_args << "#{key}=#{value}"
    end
    @information['map']['query'] = map_args.join('&')

    @current_page = 'information'

    File.open(target, "w") do |f|
      @contents = ERB.new(File.read('information.html.erb')).result
      f.write ERB.new(File.read(@config['website']['layout'])).result
    end

  end
end